import asyncio
import requests
from web3 import Web3
from telegram import Bot
from telegram.ext import Updater, CommandHandler

TELEGRAM_TOKEN = "7872098214:AAEcVXZJIh6fHhIFCfaO5Gku6gvbwxRHzCA"
ETH_ADDRESS = "0xb1b51b15125e688aea7b919eca7a4eb94aab8f17"

INFURA_WS = "wss://mainnet.infura.io/ws/v3/84842078b09946638c03157f83405213"
w3 = Web3(Web3.WebsocketProvider(INFURA_WS))

bot = Bot(token=TELEGRAM_TOKEN)

async def watch_eth_transactions():
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ethereum...")
    while True:
        try:
            pending_filter = w3.eth.filter('pending')
            while True:
                for tx_hash in pending_filter.get_new_entries():
                    tx = w3.eth.get_transaction(tx_hash)
                    if tx and tx.to and tx.to.lower() == ETH_ADDRESS.lower():
                        message = f"üí∏ –í—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ Ethereum\n\n–° –∞–¥—Ä–µ—Å–∞: `{tx['from']}`\n–°—É–º–º–∞: {w3.fromWei(tx['value'], 'ether')} ETH"
                        bot.send_message(chat_id=827200392, text=message, parse_mode='Markdown')
                await asyncio.sleep(2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)

def start(update, context):
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ–æ–±—â–∞—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/balance ‚Äî –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å")

def help_command(update, context):
    update.message.reply_text("üí° –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å–∞—Ö.\n\n/balance ‚Äî –±–∞–ª–∞–Ω—Å ETH\n/start ‚Äî –∑–∞–ø—É—Å–∫\n/help ‚Äî –ø–æ–º–æ—â—å")

def balance(update, context):
    balance_wei = w3.eth.get_balance(ETH_ADDRESS)
    balance_eth = w3.fromWei(balance_wei, 'ether')
    update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å Ethereum-–∫–æ—à–µ–ª—å–∫–∞:\n{balance_eth:.4f} ETH")

def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("balance", balance))
    loop = asyncio.get_event_loop()
    loop.create_task(watch_eth_transactions())
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
